<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>daQzi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://daqzi.github.io/"/>
  <updated>2018-08-14T09:35:20.410Z</updated>
  <id>https://daqzi.github.io/</id>
  
  <author>
    <name>王志伟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebService Soap 通过Http调用调用</title>
    <link href="https://daqzi.github.io/2018/WebService%20Soap%20%E9%80%9A%E8%BF%87Http%E8%B0%83%E7%94%A8%E8%B0%83%E7%94%A8.html"/>
    <id>https://daqzi.github.io/2018/WebService Soap 通过Http调用调用.html</id>
    <published>2018-07-19T16:00:00.000Z</published>
    <updated>2018-08-14T09:35:20.410Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="WebService-SOAP参数的生成以及http-调用流程"><a href="#WebService-SOAP参数的生成以及http-调用流程" class="headerlink" title="WebService SOAP参数的生成以及http 调用流程"></a>WebService SOAP参数的生成以及http 调用流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过java原生类创建soap请求，通过http的text/xml进行调用</span></span><br><span class="line"><span class="comment">//heanderStr 为soap头部的参数，bodyStr 为body参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(HashMap&lt;String,String&gt; headerStr, HashMap&lt;String, String&gt; bodyStr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建SOAPMessage</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SOAPMessage msg = MessageFactory.newInstance().createMessage();</span><br><span class="line">        msg.setProperty(SOAPMessage.CHARACTER_SET_ENCODING, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        SOAPEnvelope envelope = msg.getSOAPPart().getEnvelope();</span><br><span class="line">        <span class="comment">// 创建SOAPHeader</span></span><br><span class="line">        SOAPHeader header = envelope.getHeader();</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="keyword">null</span>)</span><br><span class="line">        header = envelope.addHeader();</span><br><span class="line">        <span class="comment">//namespace 命名空间 ，节点名称</span></span><br><span class="line">        <span class="comment">//类似于这样的节点 &lt;DaySinnSoapHeader xmlns="http://tempuri.org/"&gt;</span></span><br><span class="line">        QName hname = <span class="keyword">new</span> QName(nameSpace, headerElementName,<span class="string">""</span>);</span><br><span class="line">        SOAPElement soapElement = header.addChildElement(hname);</span><br><span class="line">        <span class="comment">// 增加Header元素和值</span></span><br><span class="line">        <span class="comment">// 类似于这样的 &lt;apppsd&gt;MLTYbpm&lt;/apppsd&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : headerStr.entrySet()) &#123;</span><br><span class="line">            soapElement.addChildElement(<span class="keyword">new</span> QName(nameSpace, entry.getKey()))</span><br><span class="line">                    .setValue(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建SOAPBody</span></span><br><span class="line">        SOAPBody body = envelope.getBody();</span><br><span class="line">        QName ename = <span class="keyword">new</span> QName(nameSpace, bodyElementName, <span class="string">""</span>);</span><br><span class="line">        SOAPBodyElement ele = body.addBodyElement(ename);</span><br><span class="line">        <span class="comment">// 增加Body元素和值</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : bodyStr.entrySet()) &#123;</span><br><span class="line">            ele.addChildElement(<span class="keyword">new</span> QName(nameSpace, entry.getKey()))</span><br><span class="line">                    .setValue(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        msg.writeTo(outputStream);</span><br><span class="line">        <span class="keyword">final</span> String request = outputStream.toString();</span><br><span class="line">        String response = HttpClientUtils.postXML(wsdlUrl, request);</span><br><span class="line">        <span class="comment">// 响应消息处理,将响应的消息转xml位子换为doc对象</span></span><br><span class="line">        Document doc = XmlUtil.getDocumentByXmlStr(response, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//reponsename为响应的接收的节点名称</span></span><br><span class="line">        String ret = doc.getElementsByTagName(responseName).item(<span class="number">0</span>)</span><br><span class="line">                .getTextContent();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="https://daqzi.github.io/categories/java/"/>
    
    
      <category term="webservice" scheme="https://daqzi.github.io/tags/webservice/"/>
    
      <category term="http" scheme="https://daqzi.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="https://daqzi.github.io/2018/HashMap%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://daqzi.github.io/2018/HashMap详解.html</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2018-08-14T09:35:12.217Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="JDk1-7中的hashmap"><a href="#JDk1-7中的hashmap" class="headerlink" title="JDk1.7中的hashmap"></a>JDk1.7中的hashmap</h3><ul><li>结构</li><li>put 方法</li><li>get 方法</li><li>hash冲突</li><li>hash碰撞</li></ul><h4 id="hashmap结构"><a href="#hashmap结构" class="headerlink" title="hashmap结构"></a>hashmap结构</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="https://daqzi.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://daqzi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring事务详解</title>
    <link href="https://daqzi.github.io/2017/spring-%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://daqzi.github.io/2017/spring-事务详解.html</id>
    <published>2017-09-19T16:00:00.000Z</published>
    <updated>2018-08-14T09:37:12.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h4><p>Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。对于纯JDBC操作数据库，想要用到事务，可以按照以下步骤进行：</p><p>1、获取连接 Connection con = DriverManager.getConnection()</p><p>2、开启事务con.setAutoCommit(true/false);</p><p>3、执行CRUD</p><p>4、提交事务/回滚事务 con.commit() / con.rollback();</p><p>5、关闭连接 conn.close();</p><p>使用Spring的事务管理功能后，我们可以不再写步骤 2 和 4 的代码，而是由Spirng 自动完成。那么Spring是如何在我们书写的 CRUD 之前和之后开启事务和关闭事务的呢？解决这个问题，也就可以从整体上理解Spring的事务管理实现原理了。下面简单地介绍下，注解方式为例子</p><p>1、配置文件开启注解驱动，在相关的类和方法上通过注解@Transactional标识。</p><p>2、spring 在启动的时候会去解析生成相关的bean，这时候会查看拥有相关注解的类和方法，并且为这些类和方法生成代理，并根据@Transaction的相关参数进行相关配置注入，这样就在代理中为我们把相关的事务处理掉了（开启正常提交事务，异常回滚事务）。</p><p>3、真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。</p><h4 id="数据库的隔离级别"><a href="#数据库的隔离级别" class="headerlink" title="数据库的隔离级别"></a>数据库的隔离级别</h4><p>隔离级别隔离级别的值导致的问题</p><p>Read-Uncommitted0导致脏读</p><p>Read-Committed1避免脏读，允许不可重复读和幻读</p><p>Repeatable-Read2避免脏读，不可重复读，允许幻读</p><p>Serializable3串行化读，事务只能一个一个执行，避免了脏读、不可重复读、幻读。执行效率慢，使用时慎重</p><p>脏读：一事务对数据进行了增删改，但未提交，另一事务可以读取到未提交的数据。如果第一个事务这时候回滚了，那么第二个事务就读到了脏数据。</p><p>不可重复读：一个事务中发生了两次读操作，第一次读操作和第二次操作之间，另外一个事务对数据进行了修改，这时候两次读取的数据是不一致的。</p><p>幻读：第一个事务对一定范围的数据进行批量修改，第二个事务在这个范围增加一条数据，这时候第一个事务就会丢失对新增数据的修改。</p><p>总结：</p><p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</p><p>大多数的数据库默认隔离级别为 Read Commited，比如 SqlServer、Oracle</p><p>少数数据库默认隔离级别为：Repeatable Read 比如： MySQL InnoDB</p><h4 id="spring中的事务管理器"><a href="#spring中的事务管理器" class="headerlink" title="spring中的事务管理器"></a>spring中的事务管理器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//事务管理器的顶级接口</span><br><span class="line">PlatformTransactionManager</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">PlatformTransactionManager--&gt;JDBC事务</span><br><span class="line">PlatformTransactionManager--&gt;Hibernate事务</span><br><span class="line">PlatformTransactionManager--&gt;Java持久化API事务</span><br><span class="line">PlatformTransactionManager--&gt;Java原生API事务</span><br></pre></td></tr></table></figure><h4 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h4><p>相关类： DataSourceTransactionManager</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataSourceTransactionManager是通过调用java.sql.Connection来管理事务，</span><br><span class="line">而后者是通过DataSource获取到的。通过调用连接的commit()方法来提交事务，</span><br><span class="line">同样，事务失败则通过调用rollback()方法进行回滚。</span><br></pre></td></tr></table></figure><h4 id="Hibernate事务"><a href="#Hibernate事务" class="headerlink" title="Hibernate事务"></a>Hibernate事务</h4><p>相关类： HibernateTransactionManager</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HibernateTransactionManager的实现细节是它将事务管理的职责委托给org.hibernate.Transaction对象，</span><br><span class="line">而后者是从HibernateSession中获取到的。</span><br><span class="line">当事务成功完成时，HibernateTransactionManager将会调用Transaction对象的commit()方法，</span><br><span class="line">反之，将会调用rollback()方法。</span><br></pre></td></tr></table></figure><h4 id="Java持久化API事务（JPA）"><a href="#Java持久化API事务（JPA）" class="headerlink" title="Java持久化API事务（JPA）"></a>Java持久化API事务（JPA）</h4><p>相关类： JpaTransactionManager</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JpaTransactionManager只需要装配一个JPA实体管理工厂（javax.persistence.EntityManagerFactory接口的任意实现）。JpaTransactionManager将与由工厂所产生的JPA EntityManager合作来构建事务。</span><br></pre></td></tr></table></figure><h4 id="Java原生API事务"><a href="#Java原生API事务" class="headerlink" title="Java原生API事务"></a>Java原生API事务</h4><p>相关类：  JtaTransactionManager</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果你没有使用以上所述的事务管理，或者是跨越了多个事务管理源（比如两个或者是多个不同的数据源），你就需要使用JtaTransactionManager：</span><br><span class="line">JtaTransactionManager将事务管理的责任委托给javax.transaction.UserTransaction和javax.transaction.TransactionManager对象，其中事务成功完成通过UserTransaction.commit()方法提交，事务失败通过UserTransaction.rollback()方法回滚。</span><br></pre></td></tr></table></figure><h4 id="TransactionDefinition事务基本属性"><a href="#TransactionDefinition事务基本属性" class="headerlink" title="TransactionDefinition事务基本属性"></a>TransactionDefinition事务基本属性</h4><p><img src="http://img.blog.csdn.net/20160325003448793" alt="事务属性的五边形规则"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface TransactionDefinition &#123;</span><br><span class="line">    int getPropagationBehavior(); // 返回事务的传播行为</span><br><span class="line">    int getIsolationLevel(); // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span><br><span class="line">    int getTimeout();  // 返回事务必须在多少秒内完成</span><br><span class="line">    boolean isReadOnly(); // 事务是否只读，事务管理器能够根据这个返回值进行优化，确保事务是只读的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</td></tr><tr><td>PROPAGATION_REQUIRED_NEW</td><td>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td></tr><tr><td>PROPAGATION_NEVER</td><td>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持嵌套事务</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="spring" scheme="https://daqzi.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://daqzi.github.io/tags/spring/"/>
    
      <category term="事务" scheme="https://daqzi.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>synchronized详解</title>
    <link href="https://daqzi.github.io/2017/synchronized%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://daqzi.github.io/2017/synchronized详解.html</id>
    <published>2017-08-30T16:00:00.000Z</published>
    <updated>2018-08-14T09:37:12.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="为什么要有-synchronized"><a href="#为什么要有-synchronized" class="headerlink" title="为什么要有 synchronized"></a>为什么要有 synchronized</h4><p> 在java中为了解决并发编程中存在的<a href="https://blog.csdn.net/eff666/article/details/66473088" target="_blank" rel="noopener">原子性</a>、<a href="https://blog.csdn.net/eff666/article/details/66473088" target="_blank" rel="noopener">可见性</a>、<a href="https://blog.csdn.net/eff666/article/details/66473088" target="_blank" rel="noopener">有序性</a> 提供了一系列并发处理的关键字</p><p> <strong>如：synchronized、volatile、final、concurren包等</strong></p><h4 id="synchronized的用法"><a href="#synchronized的用法" class="headerlink" title="synchronized的用法"></a>synchronized的用法</h4><p> synchronized是Java提供的一个并发控制的关键字。主要有两种用法，分别是同步方法和同步代码块。也就是说，synchronized既可以修饰方法也可以修饰代码块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class SynchronizedDemo &#123;</span><br><span class="line">     //同步方法</span><br><span class="line">    public synchronized void doSth()&#123;</span><br><span class="line">        System.out.println(&quot;Hello World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //同步代码块</span><br><span class="line">    public void doSth1()&#123;</span><br><span class="line">        synchronized (SynchronizedDemo.class)&#123;</span><br><span class="line">            System.out.println(&quot;Hello World&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="synchronized的实现原理"><a href="#synchronized的实现原理" class="headerlink" title="synchronized的实现原理"></a>synchronized的实现原理</h4><p>synchronized，是Java中用于解决并发情况下数据同步访问的一个很重要的关键字。当我们想要保证一个共享资源在同一时间只会被一个线程访问到时，我们可以在代码中使用synchronized关键字对类或者对象加锁。</p><p><strong>jvm中对同步的理解：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">方法级的同步是隐式的。同步方法的常量池中会有一个ACC_SYNCHRONIZED标志。</span><br><span class="line">当某个线程要访问某个方法的时候，会检查是否有ACC_SYNCHRONIZED，如果有设置，则需要先获得监视器锁，然后开始执行方法，方法执行之后再释放监视器锁。</span><br><span class="line">这时如果其他线程来请求执行方法，会因为无法获得监视器锁而被阻断住。</span><br><span class="line">值得注意的是，如果在方法执行过程中，发生了异常，并且方法内部并没有处理该异常，那么在异常被抛到方法外面之前监视器锁会被自动释放。</span><br><span class="line">同步代码块使用monitorenter和monitorexit两个指令实现。可以把执行monitorenter指令理解为加锁，执行monitorexit理解为释放锁。</span><br><span class="line">每个对象维护着一个记录着被锁次数的计数器。</span><br><span class="line">未被锁定的对象的该计数器为0，当一个线程获得锁（执行monitorenter）后，该计数器自增变为 1</span><br><span class="line">当同一个线程再次获得该对象的锁的时候，计数器再次自增。</span><br><span class="line">当同一个线程释放锁（执行monitorexit指令）的时候，计数器再自减。当计数器为0的时候。</span><br><span class="line">锁将被释放，其他线程便可以获得锁。</span><br></pre></td></tr></table></figure><h4 id="synchronized的原子性"><a href="#synchronized的原子性" class="headerlink" title="synchronized的原子性"></a>synchronized的原子性</h4><p>原子性是指一个操作是不可中断的，要全部执行完成，要不就都不执行。<br>我们在Java的并发编程中的多线程问题到底是怎么回事儿？中分析过：线程是CPU调度的基本单位。CPU有时间片的概念，会根据不同的调度算法进行线程调度。当一个线程获得时间片之后开始执行，在时间片耗尽之后，就会失去CPU使用权。所以在多线程场景下，由于时间片在线程间轮换，就会发生原子性问题。<br>在Java中，为了保证原子性，提供了两个高级的字节码指令monitorenter和monitorexit。前面中，介绍过，这两个字节码指令，在Java中对应的关键字就是synchronized。<br>通过monitorenter和monitorexit指令，可以保证被synchronized修饰的代码在同一时间只能被一个线程访问，在锁未释放之前，无法被其他线程访问到。因此，在Java中可以使用synchronized来保证方法和代码块内的操作是原子性的。</p><h4 id="synchronized的可见性"><a href="#synchronized的可见性" class="headerlink" title="synchronized的可见性"></a>synchronized的可见性</h4><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。<br>Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程的工作内存中保存了该线程中是用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量的传递均需要自己的工作内存和主存之间进行数据同步进行。所以，就可能出现线程1改了某个变量的值，但是线程2不可见的情况。<br>前面我们介绍过，被synchronized修饰的代码，在开始执行时会加锁，执行完成后会进行解锁。而为了保证可见性，==有一条规则是这样的：对一个变量解锁之前，必须先把此变量同步回主存中。这样解锁后，后续线程就可以访问到被修改后的值。==<br>所以，synchronized关键字锁住的对象，其值是具有可见性的。</p><h4 id="synchronized与有序性"><a href="#synchronized与有序性" class="headerlink" title="synchronized与有序性"></a>synchronized与有序性</h4><p>有序性即程序执行的顺序按照代码的先后顺序执行。<br>除了引入了时间片以外，由于处理器优化和指令重排等，CPU还可能对输入代码进行乱序执行，比如load-&gt;add-&gt;save 有可能被优化成load-&gt;save-&gt;add 。这就是可能存在有序性问题。<br>这里需要注意的是，synchronized是无法禁止指令重排和处理器优化的。也就是说，synchronized无法避免上述提到的问题。<br>那么，为什么还说synchronized也提供了有序性保证呢？<br>这就要再把有序性的概念扩展一下了。Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有操作都是天然有序的。如果在一个线程中观察另一个线程，所有操作都是无序的。<br>以上这句话也是《深入理解Java虚拟机》中的原句，但是怎么理解呢？周志明并没有详细的解释。这里我简单扩展一下，这其实和as-if-serial语义有关。<br>as-if-serial语义的意思指：不管怎么重排序（编译器和处理器为了提高并行度），单线程程序的执行结果都不能被改变。编译器和处理器无论如何优化，都必须遵守as-if-serial语义。<br>这里不对as-if-serial语义详细展开了，简单说就是，as-if-serial语义保证了单线程中，指令重排是有一定的限制的，而只要编译器和处理器都遵守了这个语义，那么就可以认为单线程程序是按照顺序执行的。当然，实际上还是有重排的，只不过我们无须关心这种重排的干扰。<br>所以呢，由于synchronized修饰的代码，同一时间只能被同一线程访问。那么也就是单线程执行的。所以，可以保证其有序性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="https://daqzi.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://daqzi.github.io/tags/java/"/>
    
      <category term="并发" scheme="https://daqzi.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>json泛型的关联转换</title>
    <link href="https://daqzi.github.io/2017/json%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%85%B3%E8%81%94%E8%BD%AC%E6%8D%A2.html"/>
    <id>https://daqzi.github.io/2017/json泛型的关联转换.html</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2018-08-14T09:37:12.493Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="JSON-对于泛型中关联转换"><a href="#JSON-对于泛型中关联转换" class="headerlink" title="JSON 对于泛型中关联转换"></a>JSON 对于泛型中关联转换</h4><ul><li>传递转换</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parseObject(response, new TypeReference&lt;Result&lt;CustResult&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="TypeReference"><a href="#TypeReference" class="headerlink" title="TypeReference"></a>TypeReference<t></t></h4><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="json" scheme="https://daqzi.github.io/categories/json/"/>
    
    
      <category term="json" scheme="https://daqzi.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>spring启动流程</title>
    <link href="https://daqzi.github.io/2017/spring%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.html"/>
    <id>https://daqzi.github.io/2017/spring的启动流程.html</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2018-08-14T09:37:12.527Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="spring-boot的启动流程"><a href="#spring-boot的启动流程" class="headerlink" title="spring boot的启动流程"></a>spring boot的启动流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new SpringApplication(sources)</span><br></pre></td></tr></table></figure><p>以上过程做了以下事情：</p><ul><li>在启动SpringBoot的过程中创建SpringApplication的实例，</li><li>并调用它的初始化方法来判断当前环境是不是web环境，</li><li>获取主应用类，存放传入的sources类，</li><li>加载org.springframework.context.ApplicationContextInitializer和org.springframework.context.ApplicationListener类型的对象。</li></ul><p>调用run()方法，做了以下事情</p><ul><li>启用监控：StopWatch主要是监控启动过程，统计启动时间，检测应用是否已经启动或者停止。</li><li>启动spring的监听事件</li><li>解析参数</li><li>配置环境变量</li><li>创建上下文对象</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="spring" scheme="https://daqzi.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://daqzi.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客常用插件及教程</title>
    <link href="https://daqzi.github.io/2017/hexo%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E6%95%99%E7%A8%8B.html"/>
    <id>https://daqzi.github.io/2017/hexo博客常用插件及教程.html</id>
    <published>2017-03-17T16:00:00.000Z</published>
    <updated>2018-08-14T09:37:12.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>为大家总结下hexo常用的插件与教程</p><p>合理的使用插件能够提高hexo的效率</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">功能</th><th style="text-align:center">文档</th></tr></thead><tbody><tr><td style="text-align:center">npm install hexo-generator-index-pin-top –save<br>npm uninstall hexo-generator-index –save</td><td style="text-align:center">文章置顶插件</td><td style="text-align:center"><a href="https://blog.csdn.net/qwerty200696/article/details/79010629" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">npm i –save hexo-wordcount</td><td style="text-align:center">文章字数+阅读时长统计</td><td style="text-align:center"><a href="https://blog.csdn.net/ganzhilin520/article/details/79048036" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">npm install hexo-baidu-url-submit –save</td><td style="text-align:center">百度链接主动推送</td><td style="text-align:center"><a href="https://hui-wang.info/2016/10/23/Hexo%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">npm install hexo-deployer-ftpsync –save</td><td style="text-align:center">hexo上传至FTP服务器</td><td style="text-align:center"><a href="https://hexo.io/zh-cn/docs/deployment.html#FTPSync" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">npm install hexo-deployer-cos –save</td><td style="text-align:center">hexo上传至腾讯云COS</td><td style="text-align:center"><a href="https://github.com/sdlzhd/hexo-deployer-cos#user-content-options" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">npm install hexo-deployer-aliyun –save</td><td style="text-align:center">hexo上传至阿里云</td><td style="text-align:center"><a href="https://github.com/yedaodao/hexo-deployer-aliyun" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">npm install –save hexo-admin</td><td style="text-align:center">hexo管理插件</td><td style="text-align:center"><a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">hexo-blog-encrypt(请看文档)</td><td style="text-align:center">hexo文章加密码</td><td style="text-align:center"><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">卜算子ip计数统计</td><td style="text-align:center">IP计数统计</td><td style="text-align:center"><a href="https://www.jianshu.com/p/8a8f880f40c0" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">npm install leancloud-storage –save</td><td style="text-align:center">Valine评论</td><td style="text-align:center"><a href="https://valine.js.org/quickstart.html#npm" target="_blank" rel="noopener">点我</a></td></tr><tr><td style="text-align:center">Valine评论邮件通知</td><td style="text-align:center">Valine评论提醒</td><td style="text-align:center"><a href="http://www.zhaojun.im/hexo-valine-admin/" target="_blank" rel="noopener">点我</a></td></tr></tbody></table><blockquote><p>有需要的却找不到的，或者有优化方面的问题，都可以在下方留言，博主都会帮你解答</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为大家总结下hexo常用的插件与教程&lt;/p&gt;
&lt;p&gt;合理的使用插件能够提高hexo的效率&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://daqzi.github.io/categories/hexo/"/>
    
    
      <category term="hexo插件" scheme="https://daqzi.github.io/tags/hexo%E6%8F%92%E4%BB%B6/"/>
    
      <category term="hexo博客" scheme="https://daqzi.github.io/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo教程" scheme="https://daqzi.github.io/tags/hexo%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
