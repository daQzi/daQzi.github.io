<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>daQzi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-07T07:36:41.073Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>daQzi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webservice soap调用</title>
    <link href="http://yoursite.com/2018/03/01/002/"/>
    <id>http://yoursite.com/2018/03/01/002/</id>
    <published>2018-03-01T13:46:12.000Z</published>
    <updated>2018-08-07T07:36:41.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebService-SOAP参数的生成以及http-调用流程"><a href="#WebService-SOAP参数的生成以及http-调用流程" class="headerlink" title="WebService SOAP参数的生成以及http 调用流程"></a>WebService SOAP参数的生成以及http 调用流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过java原生类创建soap请求，通过http的text/xml进行调用</span></span><br><span class="line"><span class="comment">//heanderStr 为soap头部的参数，bodyStr 为body参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(HashMap&lt;String,String&gt; headerStr, HashMap&lt;String, String&gt; bodyStr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建SOAPMessage</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SOAPMessage msg = MessageFactory.newInstance().createMessage();</span><br><span class="line">        msg.setProperty(SOAPMessage.CHARACTER_SET_ENCODING, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        SOAPEnvelope envelope = msg.getSOAPPart().getEnvelope();</span><br><span class="line">        <span class="comment">// 创建SOAPHeader</span></span><br><span class="line">        SOAPHeader header = envelope.getHeader();</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="keyword">null</span>)</span><br><span class="line">        header = envelope.addHeader();</span><br><span class="line">        <span class="comment">//namespace 命名空间 ，节点名称</span></span><br><span class="line">        <span class="comment">//类似于这样的节点 &lt;DaySinnSoapHeader xmlns="http://tempuri.org/"&gt;</span></span><br><span class="line">        QName hname = <span class="keyword">new</span> QName(nameSpace, headerElementName,<span class="string">""</span>);</span><br><span class="line">        SOAPElement soapElement = header.addChildElement(hname);</span><br><span class="line">        <span class="comment">// 增加Header元素和值</span></span><br><span class="line">        <span class="comment">// 类似于这样的 &lt;apppsd&gt;MLTYbpm&lt;/apppsd&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : headerStr.entrySet()) &#123;</span><br><span class="line">            soapElement.addChildElement(<span class="keyword">new</span> QName(nameSpace, entry.getKey()))</span><br><span class="line">                    .setValue(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建SOAPBody</span></span><br><span class="line">        SOAPBody body = envelope.getBody();</span><br><span class="line">        QName ename = <span class="keyword">new</span> QName(nameSpace, bodyElementName, <span class="string">""</span>);</span><br><span class="line">        SOAPBodyElement ele = body.addBodyElement(ename);</span><br><span class="line">        <span class="comment">// 增加Body元素和值</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : bodyStr.entrySet()) &#123;</span><br><span class="line">            ele.addChildElement(<span class="keyword">new</span> QName(nameSpace, entry.getKey()))</span><br><span class="line">                    .setValue(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        OutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        msg.writeTo(outputStream);</span><br><span class="line">        <span class="keyword">final</span> String request = outputStream.toString();</span><br><span class="line">        String response = HttpClientUtils.postXML(wsdlUrl, request);</span><br><span class="line">        <span class="comment">// 响应消息处理,将响应的消息转xml位子换为doc对象</span></span><br><span class="line">        Document doc = XmlUtil.getDocumentByXmlStr(response, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//reponsename为响应的接收的节点名称</span></span><br><span class="line">        String ret = doc.getElementsByTagName(responseName).item(<span class="number">0</span>)</span><br><span class="line">                .getTextContent();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebService-SOAP参数的生成以及http-调用流程&quot;&gt;&lt;a href=&quot;#WebService-SOAP参数的生成以及http-调用流程&quot; class=&quot;headerlink&quot; title=&quot;WebService SOAP参数的生成以及http 调用流
      
    
    </summary>
    
      <category term="webservice" scheme="http://yoursite.com/categories/webservice/"/>
    
    
      <category term="webservice,soap" scheme="http://yoursite.com/tags/webservice-soap/"/>
    
  </entry>
  
  <entry>
    <title>spring boot的启动流程</title>
    <link href="http://yoursite.com/2017/04/10/001/"/>
    <id>http://yoursite.com/2017/04/10/001/</id>
    <published>2017-04-10T06:28:03.000Z</published>
    <updated>2018-08-07T07:35:30.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSON-对于泛型中关联转换"><a href="#JSON-对于泛型中关联转换" class="headerlink" title="JSON 对于泛型中关联转换"></a>JSON 对于泛型中关联转换</h2><ul><li>传递转换</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parseObject(response, new TypeReference&lt;Result&lt;CustResult&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="TypeReference"><a href="#TypeReference" class="headerlink" title="TypeReference"></a>TypeReference<t></t></h2><hr><h2 id="spring-boot的启动流程"><a href="#spring-boot的启动流程" class="headerlink" title="spring boot的启动流程"></a>spring boot的启动流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new SpringApplication(sources)</span><br></pre></td></tr></table></figure><p>以上过程做了以下事情：</p><ul><li>在启动SpringBoot的过程中创建SpringApplication的实例，</li><li>并调用它的初始化方法来判断当前环境是不是web环境，</li><li>获取主应用类，存放传入的sources类，</li><li>加载org.springframework.context.ApplicationContextInitializer和org.springframework.context.ApplicationListener类型的对象。</li></ul><p>调用run()方法，做了以下事情</p><ul><li>启用监控：StopWatch主要是监控启动过程，统计启动时间，检测应用是否已经启动或者停止。</li><li>启动spring的监听事件</li><li>解析参数</li><li>配置环境变量</li><li>创建上下文对象</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSON-对于泛型中关联转换&quot;&gt;&lt;a href=&quot;#JSON-对于泛型中关联转换&quot; class=&quot;headerlink&quot; title=&quot;JSON 对于泛型中关联转换&quot;&gt;&lt;/a&gt;JSON 对于泛型中关联转换&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;传递转换&lt;/li&gt;
&lt;li&gt;&lt;f
      
    
    </summary>
    
      <category term="spring boot" scheme="http://yoursite.com/categories/spring-boot/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
</feed>
